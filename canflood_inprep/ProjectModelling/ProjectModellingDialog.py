# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CanFlood_ModelDialog
                                 A QGIS plugin
 CanFlood model data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-02-19
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Tony De Crescenzo
        email                : tony.decrescenzo@ibigroup.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QObject
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QListWidget

# Initialize Qt resources from file resources.py
#from .resources import *
# Import the code for the dialog

#from .canFlood_inPrep_dialog import CanFlood_inPrepDialog
import os.path
from qgis.core import QgsProject, Qgis, QgsVectorLayer, QgsRasterLayer, QgsFeatureRequest

# User defined imports
from qgis.core import *
from qgis.analysis import *
import qgis.utils
import processing
from processing.core.Processing import Processing
import sys, os, warnings, tempfile, logging, configparser

sys.path.append(r'C:\IBI\_QGIS_\QGIS 3.8\apps\Python37\Lib\site-packages')
#sys.path.append(os.path.join(sys.exec_prefix, 'Lib/site-packages'))
import numpy as np
import pandas as pd

file_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(file_dir)
#import model
#from risk import RiskModel

import canflood_inprep.model.risk
import canflood_inprep.model.dmg
import canflood_inprep.prep.wsamp
#from canFlood_model import CanFlood_Model
from canflood_inprep.hp import Error
from shutil import copyfile

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ProjectModellingDialog_Base.ui'))


class Modelling_Dialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, iface, parent=None):
        """Constructor."""
        super(Modelling_Dialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        self.wd = None
        self.cf = None
        self.iface = iface
        
        self.pushButton_br_1.clicked.connect(self.select_output_folder)
        self.pushButton_br_2.clicked.connect(self.select_output_file)
        self.pushButton_br_3.clicked.connect(self.select_output_folder)
        self.pushButton_br_4.clicked.connect(self.select_output_file)
        self.pushButton_run_1.clicked.connect(self.run_risk)
        self.pushButton_run_2.clicked.connect(self.run_dmg)
        
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
        
    def select_output_folder(self):
        foldername = QFileDialog.getExistingDirectory(self, "Select Directory")
        print(foldername)
        if foldername is not "":
            self.lineEdit_wd_1.setText(os.path.normpath(foldername))
            self.lineEdit_wd_2.setText(os.path.normpath(foldername))
            self.lineEdit_cf_1.setText(os.path.normpath(os.path.join(foldername, 'CanFlood_control_01.txt')))
            self.lineEdit_cf_2.setText(os.path.normpath(os.path.join(foldername, 'CanFlood_control_01.txt')))
    
    def select_output_file(self):
        filename = QFileDialog.getOpenFileName(self, "Select File") 
        self.lineEdit_cf_1.setText(str(filename[0]))
        self.lineEdit_cf_2.setText(str(filename[0]))
    
    def run_risk(self):
        self.wd = self.lineEdit_wd_1.text()
        self.cf = self.lineEdit_cf_1.text()
        if (self.wd is None or self.cf is None):
            self.iface.messageBar().pushMessage("Input field missing",
                                                level=Qgis.Critical, duration=10)
        canflood_inprep.model.risk.main_run(self.wd, self.cf)
        self.iface.messageBar().pushMessage(
                "Success", "Process successful", level=Qgis.Success, duration=10)
    
    def run_dmg(self):
        self.wd = self.lineEdit_wd_1.text()
        self.cf = self.lineEdit_cf_1.text()
        if (self.wd is None or self.cf is None):
            self.iface.messageBar().pushMessage("Input field missing",
                                                level=Qgis.Critical, duration=10)
        canflood_inprep.model.dmg.main_run(self.wd, self.cf)
        self.iface.messageBar().pushMessage(
                "Success", "Process successful", level=Qgis.Success, duration=10)
        
    def run(self):
        pass
