# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CanFlood_inPrep
                                 A QGIS plugin
 This plugin preps CanFlood data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-02-19
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Tony De Crescenzo
        email                : tony.decrescenzo@ibigroup.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QObject
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QListWidget

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog

from .canFlood_inPrep_dialog import CanFlood_inPrepDialog
import os.path
from qgis.core import QgsProject, Qgis, QgsVectorLayer, QgsRasterLayer, QgsFeatureRequest

# User defined imports
from qgis.core import *
from qgis.analysis import *
import qgis.utils
import processing
from processing.core.Processing import Processing
import sys, os, warnings, tempfile, logging, configparser

sys.path.append(r'C:\IBI\_QGIS_\QGIS 3.8\apps\Python37\Lib\site-packages')
#sys.path.append(os.path.join(sys.exec_prefix, 'Lib/site-packages'))
import numpy as np
import pandas as pd

file_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(file_dir)
#import model
#from risk import RiskModel

import model.risk
import model.dmg
import prep.wsamp
#from canFlood_model import CanFlood_Model
from hp import Error
from shutil import copyfile


class CanFlood_inPrep:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.ras = []
        self.ras_dict = {}
        self.vec = None
        self.wd = None
        self.cf = None
        
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CanFlood_inPrep_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&CanFlood_inPrep')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CanFlood_inPrep', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""  
        
        self.toolBar = self.iface.addToolBar("MY TOOLBAR tools")
        self.toolBar.setObjectName("MY TOOLBAR tools")

        self.act1 = QAction(QIcon(":/plugins/canFlood_inPrep/icon1.png"), QCoreApplication.translate("IMPRESStoolbar", "Tool1"), self.iface.mainWindow())
        self.act2 = QAction(QIcon(":/plugins/canFlood_inPrep/icon2.png"), QCoreApplication.translate("IMPRESStoolbar", "Tool2"), self.iface.mainWindow())
        self.act3 = QAction(QIcon(":/plugins/canFlood_inPrep/icon3.png"), QCoreApplication.translate("IMPRESStoolbar", "Tool3"), self.iface.mainWindow())
        
        self.toolBar.addAction(self.act1)
        self.toolBar.addAction(self.act2)
        self.toolBar.addAction(self.act3)
        
        #QObject.connect(self.act1, SIGNAL("triggered()"), self.runtool1)
        #QObject.connect(self.act2, SIGNAL("triggered()"), self.runtool2)
        #QObject.connect(self.act3, SIGNAL("triggered()"), self.runtool3)
        
        '''
        icon_path = ':/plugins/canFlood_inPrep/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())
        # will be set False in run()
        self.first_start = True
        '''
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&CanFlood_inPrep'),
                action)
            self.iface.removeToolBarIcon(action)
            
    # Select input/output files/folders            
    def select_output_file_vcs(self):
        filename = QFileDialog.getOpenFileName(self.dlg, "Select File") 
        self.dlg.lineEdit_curve.setText(str(filename[0]))
        
    def select_output_file_cf(self):
        filename = QFileDialog.getOpenFileName(self.dlg, "Select File")
        self.dlg.lineEdit_control_1.setText(str(filename[0]))
        self.dlg.lineEdit_control_2.setText(str(filename[0]))
        self.cf = str(filename[0])
    
    def select_output_folder(self):
        foldername = QFileDialog.getExistingDirectory(self.dlg, "Select Directory")
        self.wd = foldername 
        self.dlg.lineEdit_wd.setText(os.path.normpath(foldername))
    
    # Functions related to hazard raster loading/unloading
    def add_ras(self):
        x = [str(self.dlg.listWidget_ras.item(i).text()) for i in range(self.dlg.listWidget_ras.count())]
        self.ras_dict.update({ (self.dlg.comboBox_ras.currentText()) : (self.dlg.comboBox_ras.currentLayer()) })
        if (self.dlg.comboBox_ras.currentText()) not in x:
            self.dlg.listWidget_ras.addItem(self.dlg.comboBox_ras.currentText())
            self.ras_dict.update({ (self.dlg.comboBox_ras.currentText()) : (self.dlg.comboBox_ras.currentLayer()) })
        
    def clear_text_edit(self):
        if len(self.ras_dict) > 0:
            self.dlg.listWidget_ras.clear()
            self.ras_dict = {}
    
    def remove_text_edit(self):
        if (self.dlg.listWidget_ras.currentItem()) is not None:
            value = self.dlg.listWidget_ras.currentItem().text()
            item = self.dlg.listWidget_ras.takeItem(self.dlg.listWidget_ras.currentRow())
            item = None
            for k in list(self.ras_dict):
                if k == value:
                    self.ras_dict.pop(value)

    def add_all_text_edit(self):
        layers = self.iface.mapCanvas().layers()
        #layers_vec = [layer for layer in layers if layer.type() == QgsMapLayer.VectorLayer]
        layers_ras = [layer for layer in layers if layer.type() == QgsMapLayer.RasterLayer]
        x = [str(self.dlg.listWidget_ras.item(i).text()) for i in range(self.dlg.listWidget_ras.count())]
        for layer in layers_ras:
            if (layer.name()) not in x:
                self.ras_dict.update( { layer.name() : layer} )
                self.dlg.listWidget_ras.addItem(str(layer.name()))

    
    # Functions related to setting file/folder paths and creating/setting control file                    
    def set_wd(self):
        self.wd =  self.dlg.lineEdit_wd.text()
        self.check_cf()
        self.dlg.lineEdit_curve.setText(os.path.normpath(os.path.join(self.wd, 'CanFlood - curve set 01.xls')))
        self.dlg.lineEdit_control_1.setText(os.path.normpath(os.path.join(self.wd, 'CanFlood_control_01.txt')))
        self.dlg.lineEdit_control_2.setText(os.path.normpath(os.path.join(self.wd, 'CanFlood_control_01.txt')))
        
    def check_cf(self):
        dirname = os.path.dirname(__file__)
        cf_src = os.path.join(dirname, '_documents/CanFlood_control_01.txt')
        scratch_src = os.path.join(dirname, '_documents/scratch.txt')
        cf_path = os.path.join(self.wd, 'CanFlood_control_01.txt')
        
        if not (os.path.isfile(cf_path)):
            copyfile(cf_src, cf_path)
            
        if not os.path.exists(scratch_src):
            open(scratch_src, 'w').close()
        
        pars = configparser.ConfigParser(inline_comment_prefixes='#', allow_no_value=True)
        _ = pars.read(cf_path)
        
        pars.set('dmg_fps', 'curves', os.path.normpath(os.path.join(self.wd, 'CanFlood - curve set 01.xls')))
        pars.set('dmg_fps', 'finv', os.path.normpath(os.path.join(self.wd, 'finv_icomp_cT1_heights.csv')))
        pars.set('dmg_fps', 'expos', os.path.normpath(os.path.join(self.wd, 'expos_test_1_7.csv')))
        pars.set('dmg_fps', '#expos file path set from wsamp.py')
        pars.set('dmg_fps', 'gels', os.path.normpath(os.path.join(self.wd, 'gel_cT1.csv')))
        
        pars.set('risk_fps', 'dmgs', os.path.normpath(os.path.join(self.wd, 'dmg_results.csv')))
        pars.set('risk_fps', 'exlikes', os.path.normpath(os.path.join(self.wd, 'elikes_cT1.csv')))
        pars.set('risk_fps', 'aeps', os.path.normpath(os.path.join(self.wd, 'eaep_cT1.csv')))
        
        with open(cf_path, 'w') as configfile:
            pars.write(configfile)
            

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = CanFlood_inPrepDialog()
            
            # Fetch the currently loaded layers
            layers = self.iface.mapCanvas().layers()
            layers_ras = [layer for layer in layers if layer.type() == QgsMapLayer.RasterLayer]
            layers_vec = [layer for layer in layers if layer.type() == QgsMapLayer.VectorLayer]
            
            self.dlg.comboBox_vec.setFilters(QgsMapLayerProxyModel.VectorLayer)
            self.dlg.comboBox_ras.setFilters(QgsMapLayerProxyModel.RasterLayer)
            self.dlg.comboBox_dtm.setFilters(QgsMapLayerProxyModel.RasterLayer)
            self.dlg.listWidget_ls.addItems(layer.name() for layer in layers_vec)
            self.dlg.listWidget_ls.setSelectionMode(QListWidget.MultiSelection)
            
            # Set folder/file browse buttons
            self.dlg.pushButton_br_1.clicked.connect(self.select_output_folder)
            self.dlg.pushButton_br_2.clicked.connect(self.select_output_file_vcs)
            self.dlg.pushButton_br_3.clicked.connect(self.select_output_file_cf)
            self.dlg.pushButton_br_4.clicked.connect(self.select_output_file_cf)
            self.dlg.pushButton_set.clicked.connect(self.set_wd)
            self.dlg.pushButton_remove.clicked.connect(self.remove_text_edit)
            self.dlg.pushButton_clear.clicked.connect(self.clear_text_edit)
            self.dlg.pushButton_add_all.clicked.connect(self.add_all_text_edit)
            
            self.dlg.comboBox_ras.currentTextChanged.connect(self.add_ras)
            
            self.dlg.buttonBox.accepted.connect(self.dlg.accept)
            self.dlg.buttonBox.rejected.connect(self.dlg.reject)
            
        
        # Clear the contents of the comboBox from previous runs
        self.dlg.comboBox_vec.clear()
        self.dlg.comboBox_ras.clear()
        self.dlg.comboBox_dtm.clear()
        self.dlg.comboBox_aoi.clear()
        self.dlg.listWidget_ras.clear()
        self.dlg.lineEdit_wd.clear()
        self.dlg.lineEdit_curve.clear()
        self.dlg.lineEdit_control_1.clear()
        self.dlg.lineEdit_control_2.clear()
        
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            #=======================================================================
            # calculate poly stats
            #=======================================================================
            self.vec = self.dlg.comboBox_vec.currentLayer()
            self.ras = list(self.ras_dict.values())
            self.cf = self.dlg.lineEdit_control_1.text()
            if (self.vec is None or len(self.ras) == 0 or self.wd is None or self.cf is None):
                self.iface.messageBar().pushMessage("Input field missing",
                                                     level=Qgis.Critical, duration=10)
                return
            
            pars = configparser.ConfigParser(inline_comment_prefixes='#', allow_no_value=True)
            _ = pars.read(self.cf)
            pars.set('dmg_fps', 'curves', self.dlg.lineEdit_curve.text())
            with open(self.cf, 'w') as configfile:
                pars.write(configfile)
            
            prep.wsamp.main_run(self.ras, self.vec, self.wd, self.cf)
            self.iface.messageBar().pushMessage(
                "Success", "Process successful", level=Qgis.Success, duration=10)
